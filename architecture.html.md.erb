---
title: Log and Metric Egress Architecture
owner: Logging and Metrics
---

This topic describes the log and metric egress architecture options. These architecture options include the Loggregator Firehose architecture and a shared-nothing architecture. It also describes the components that send BOSH-reported VM metrics to Loggregator.

## <a id='overview'></a> Overview of Log and Metric Egress Architecture

Log and metric egress is the process by which logs and metrics are transported from your deployment to consumers such as the CF CLI, monitoring tools, or other internal system components. These logs and metrics can either:
* flow directly from the VMs that produce them to their consumers through a shared nothing architecture,
* or pass through the Loggregator Firehose.

<img src='images/architecture/overview.png' alt="Arrows are shown depicting the flow of information from VMs. One arrow points directly from VMs to Consumers. The other arrow points to the Firehose, which then sends to Consumers.">

It is helpful to know how logs and metrics pass through different components on the platform so that you can troubleshoot:

* missing logs and metrics,
* excessive use of resources like CPU or memory, or
* other issues with external logs/metrics consumers.

## <a id='vms-egress'></a> How Logs and Metrics Egress from VMs

Whether you're using the Loggregator Firehose or shared-nothing architecture, the following components send logs and metrics from VMs:

<img src='images/architecture/vms.png' alt="A Forwarder Agent appears inside a square labeled VMs. Apps are shown sending to the Forwarder Agent, and Components are shown sending metrics to the Forwarder Agent. Components also send logs to rsyslog, which then sends platform logs outside the system via syslog RFC5424. The Forwarder Agent sends to three downstream consumers. The Syslog Agent sends app logs via syslog RFC5424. The Metrics Agent exposes metrics via Prometheus endpoints. Finally, the Loggregator Agent sends metrics and app logs via syslog RFC5424.">

  1. Apps and components on the system emit logs and metrics.
  2. Logs and metrics pass through two forwarders:
    * rsyslog, which sends platform logs in Syslog RFC5424 format.
    * The Forwarder Agent, which sends metrics and app logs to three agents (see below).
  3. Metrics and app logs are sent through each of the following:
    * The Syslog Agent sends app logs in Syslog RFC5424 format to aggregate and app log destinations.
    * The Metrics Agent exposes metrics for Prometheus-style scraping.
    * The Loggregator Agent sends metrics and app logs to the Loggregator Firehose.

## <a id='firehose'></a> How the Firehose Forwards Logs and Metrics

The Loggregator Firehose forwards logs and metrics through two different APIs called the V1 and V2 Firehose. These logs and metrics follow this path:

<img src='images/architecture/firehose.png' alt="A Loggregator Agent appears inside a square labeled
VMs. Loggregator Agents send to Dopplers, located on Doppler VMs. Dopplers, in turn, send to both
Traffic Controllers and Reverse Log Proxies. V1 Firehose Consumers receive logs and metrics from
Traffic Controllers, whereas V2 Firehose Consumers receive logs and metrics from Reverse Log
Proxies. V2 Firehose Consumers can also receive logs and metrics from Reverse Log Proxy (RLP) Gateways.">

  1. The Loggregator Agent takes each log/metric and sends it to one of the downstream Dopplers.
  2. Dopplers then make a copy of log/metric for each consumer and send them to the Traffic
     Controllers and Reverse Log Proxies for distribution.
  3. Traffic Controllers and Reverse Log Proxies forward logs and metrics differently:
      * Traffic Controllers receive Websocket connections from V1 Firehose Consumers, and send
        logs/metrics as V1 Envelopes.<br/><br/>
        If any of these consumers start to fall behind, Traffic Controllers will log a slow consumer
        alert and disconnect that particular consumer.<br/><br/>
      * Reverse Log Proxies receive gRPC connections from V2 Firehose Consumers, and send logs/metrics
        as V2 Envelopes.<br/><br/>
        If a consumer falls behind, the envelopes will just be dropped.<br/><br/>
      * Reverse Log Proxy Gateways (RLP Gateways) receive HTTP connections from V2 Firehose consumers,
        and send logs/metrics as JSON-encoded V2 Envelopes.<br/><br/>
        Reverse Log Proxy Gateways connect to Reverse Log Proxies, rather than directly to
        Dopplers.<br/><br/>

## <a id="consumers"></a> How Consumers Receive Logs and Metrics

To make use of the logs and metrics available in <%= vars.platform_name %>, observability integrations must consume them by one of the following methods:

<img src='images/architecture/consumers.png' alt="A Forwarder Agent appears inside a square labeled VMs. Apps are shown sending to the Forwarder Agent, and Components are shown sending metrics to the Forwarder Agent. Components also send logs to rsyslon, which then sends platform logs outside the system via syslog RFC5424. The Forwarder Agent sends to three downstream consumers. The Syslog Agent sends app logs via syslog RFC5424. The Metrics Agent exposes metrics via Prometheus endpoints. Finally, the Loggregator Agent sends metrics and app logs via syslog RFC5424.">

Log Cache provides a short-term snapshot of logs and metrics to the CF CLI and any CF Web UIs, such
as Stratos or VMware Tanzu Application Service Apps Manager. Log Cache receives logs and metrics either from the
Firehose or directly from VMs through Syslog.

Observability integrations, such as nozzles, can consume logs and metrics by either:

  * connecting to the Loggregator Firehose, like the [firehose-to-syslog nozzle](https://github.com/cloudfoundry-community/firehose-to-syslog) and other nozzles, or
  * receiving logs in Syslog RFC 5424 format and scraping metrics from Prometheus endpoints.

## <a id="architecture-references"></a> Detailed Architecture References

The architectures described in this topic include components for collecting, storing, and forwarding logs and metrics.

This topic includes the following architecture diagrams:

* [Firehose Architecture](#firehose-architecture)

* [Shared-Nothing Architecture](#shared-nothing-architecture)

* [System Metrics Agents Architecture](#system-metrics-agents)

<%= vars.loggregator_architecture_syslog %>

### <a id='firehose-architecture'></a> Firehose Architecture
<a id='loggregator-architecture'></a>

The following diagram shows how logs and metrics are transported from components and apps in your deployment to Loggregator Firehose consumers, such as nozzles, monitoring tools, or third-party software.

You can use this diagram to:

* Understand the components that transport logs and metrics to the Firehose.
* Diagnose performance issues related to logging and metrics. 
* Make decisions about how to scale the components or Firehose consumers described in this architecture.

<img src='images/architecture/firehose-reference.png' alt="A Forwarder Agent appears in squares that depict 'Diego Cell VMs' and 'Component VMs'. Within the Diego Cell VMs, applications, Diego Rep and Prom Scraper send logs and metrics to the Forwarder Agent. Within the Component VMs, Diego, Prom Scraper and Statsd Injector send metrics to the Forwarder Agent. The Forwarder Agent sends to the Loggregator Agents, which in turn send to the Dopplers. Dopplers send to Traffic Controllers and Reverse Log Proxies, which each send logs and metrics to different consumers. Traffic Controllers send to V1 Firehose Consumers, and Reverse Log Proxies send to V2 Firehose Consumers. V2 Firehose External Consumers are serviced through the Reverse Log Proxy Gateway. Logs and metrics are also sent to Log Cache via the Log Cache Nozzle. Cloud Controller consumes app metrics from Log Cache, and developer tools consume logs and metrics via the Log Cache CF Auth Proxy. For more descriptions of all of the components in Loggregator, see the list of components below.">

[View a larger version of this image.](./images/architecture/firehose-reference.png)

The following components are included in the Loggregator Firehose, as shown in the diagram above:

* **Prom Scraper**: Prom Scrapers run on both <%= vars.platform_name %> component VMs and Diego Cell VMs. They aggregate metrics from <%= vars.platform_name %> components located on those VMs via Prometheus exposition. Prom Scrapers then forward those metrics to Forwarder Agents.

* **Statsd Injector**: Statsd Injectors run on <%= vars.platform_name %> component VMs. They receive metrics from <%= vars.platform_name %> components over the Statsd protocol. Statsd Injectors then forward those metrics to Forwarder Agents.

* **Forwarder Agent**: Forwarder Agents run on both <%= vars.platform_name %> component VMs and Diego Cell VMs. They receive logs and metrics from the apps and <%= vars.platform_name %> components located on those VMs. Forwarder Agents then forward the logs and metrics to Loggregator Agents and other agents.

* **Loggregator Agent**: Loggregator Agents run on both <%= vars.platform_name %> component VMs and Diego Cell VMs. They receive logs and metrics from the Forwarder Agents, then forward the logs and metrics via multiple downstream Dopplers.

* **Doppler**: Dopplers receive logs and metrics from Loggregator Agents, store them in temporary buffers, and forward them to Traffic Controllers and Reverse Log Proxies.

* **Traffic Controller**: Traffic Controllers poll Doppler servers for logs and metrics, then translate these messages from the Doppler servers as necessary for external and legacy APIs. It services the Firehose Endpoint (also known as the V1 Firehose). The Firehose cf CLI plugin allows you to view the output of the Firehose. For more information about the Firehose plugin, see [Installing the Loggregator Firehose Plugin for CF CLI](./cli-plugin.html).

* **Reverse Log Proxy (V2 Firehose)**: Reverse Log Proxies (RLPs) collect logs and metrics from Dopplers and forward them to Log Cache and other consumers via gRPC. Operators can scale up the number of RLPs based on overall log volume.

* **Reverse Log Proxy Gateway (V2 Firehose)**: Reverse Log Proxies Gateways (RLP Gateways) collect logs and metrics from Reverse Log Proxies and forward them to consumers via HTTP. Collecting logs and metrics via the RLP Gateway will have lower throughput compared to consuming from the Traffic Controller or Reverse Log Proxy.

* **Log Cache**: <%= partial 'log_cache' %>

* **rsyslog**: While not part of the firehose itself, rsyslog is responsible for delivering logs from platform components to outside consumers.

### <a id='shared-nothing-architecture'></a> Shared-Nothing Architecture

This section describes the shared-nothing architecture for transporting logs and metrics from your deployment. 

Similar to the Loggregator Firehose Architecture, this shared-nothing architecture allows you to forward logs and metrics from your deployment to external and internal consumers.

In contrast to the Loggregator Firehose architecture, the shared-nothing architecture allows logs and metrics to pass through fewer components during egress. For example, the shared-nothing architecture does not require the Forwarder Agent, Syslog Agent, or Metrics Agent. 

You can use this diagram to:

* Understand the components that transport logs and metrics to the Firehose.
* Diagnose performance issues related to logging and metrics. 
* Make decisions about how to best scale the Loggregator components or Firehose consumers described in this architecture.

<img src='images/architecture/shared-nothing-reference.png' alt="A Forwarder Agent appears in squares that depict 'Diego Cell VMs' and 'Component VMs'. Within the Diego Cell VMs, applications, Diego Rep and Prom Scraper send logs and metrics to the Forwarder Agent. Within the Component VMs, Diego, Prom Scraper and Statsd Injector send metrics to the Forwarder Agent. The Forwarder Agent sends to both Syslog Agents and Metrics Agents on the same VM. Syslog Agents send logs to Syslog Drain Consumers and logs/metrics to the Log Cache Syslog Server via Syslog RFC 5424. Metrics Agents expose metrics via Prometheus exposition which can be scraped by Metric Scrapers. Metrics Discovery Registrars on the same VM register the Metrics Agents' endpoints with NATS for discovery by Metric Scrapers. Cloud Controller consumes app metrics from Log Cache, and developer tools consume logs and metrics via the Log Cache CF Auth Proxy. For more descriptions of all of the components in Loggregator, see the list of components below.">

[View a larger version of this image.](./images/architecture/shared-nothing-reference.png)

The following components are included in the Shared-Nothing Architecture, as shown in the diagram above:

* **Prom Scraper**: Prom Scrapers run on both <%= vars.platform_name %> component VMs and Diego Cell VMs. They aggregate metrics from <%= vars.platform_name %> components located on those VMs via Prometheus exposition. Prom Scrapers then forward those metrics to Forwarder Agents.

* **Statsd Injector**: Statsd Injectors run on <%= vars.platform_name %> component VMs. They receive metrics from <%= vars.platform_name %> components over the Statsd protocol. Statsd Injectors then forward those metrics to Forwarder Agents.

* **Forwarder Agent**: Forwarder Agents run on both <%= vars.platform_name %> component VMs and Diego Cell VMs. They receive logs and metrics from the applications and <%= vars.platform_name %> components located on those VMs. Forwarder Agents then forward the logs and metrics to Loggregator Agents and other agents.

* **Syslog Agent**: <%= partial 'syslog_agents' %>

* **Syslog Binding Cache** (not pictured): Syslog Agents can overwhelm CAPI when querying for existing bindings. This component acts as a caching proxy between the Syslog Agents and CAPI.

* **Metrics Agents**: Metrics Agents receive metrics from Forwarder Agents, and make them available to Metric Scrapers via Prometheus Exposition.

* **Metrics Discovery Registrars**: Metrics Discovery Registrars register each scrapeable endpoint with NATS, for discovery by Metrics Scrapers.

* **Log Cache**: <%= partial 'log_cache' %>

* **Log Cache Syslog Server**: The Log Cache Syslog Server takes the place of the Log Cache Nozzle (only one will be active at a time). It receives logs and metrics from Syslog Agents and sends them to Log Cache.

### <a id='system-metrics-agents'></a> System Metrics Agents Architecture

The following diagram shows the architecture of a Loggregator deployment that uses System Metrics Agents to collect VM and system-level metrics.

<img src='images/architecture/system-metrics-agents.png' alt="System Metrics Agent appear in squares that depict 'Host VMs'. Represented by arrows, the System Metrics Agents send VM system-level metrics to a System Metrics Scraper, which forwards these metrics to Loggregator Agents over mTLS. For more descriptions of all of the components in Loggregator, see the 'Loggregator Components' section below.">

[View a larger version of this image.](./images/architecture/system-metrics-agents.png)

The following describes the components of a Loggregator deployment that uses System Metrics Agents, as shown in the diagram above:

* **System Metrics Agent**: A standalone agent to provide VM system metrics using a Prometheus-scrapable endpoint.

* **System Metrics Scraper**: The System Metrics Scraper forwards metrics from System Metrics Agents to Loggregator Agents over mTLS.

## <a id='bosh-metrics'></a> Related BOSH Components

This section describes the <%= vars.platform_name %> components that forward BOSH-reported VM metrics to Loggregator. BOSH-reported VM metrics measure the health of BOSH-deployed VMs on which apps and <%= vars.platform_name %> components are deployed. Loggregator streams BOSH-reported VM metrics through the Firehose.

The following are the <%= vars.platform_name %> components that send BOSH-reported VM metrics to Loggregator:

* **BOSH Agent**: BOSH Agents are located on component VMs and Diego Cell VMs. They collect metrics, such as Diego Cell capacity remaining, from the VM and forward them to the BOSH Health Monitor.

* **BOSH Health Monitor**: The BOSH Health Monitor receives metrics from the BOSH Agents. It then forwards the metrics to a third-party service or to the BOSH System Metrics Forwarder.

* **BOSH System Metrics Plugin**: This plugin reads health events, such as VM heartbeats and alerts from the BOSH Health Monitor, and streams them to the BOSH System Metrics Server.

* **BOSH System Metrics Server**: The BOSH System Metrics Server streams metrics and heartbeat events to the BOSH System Metrics Forwarder over gRPC.

* **BOSH System Metrics Forwarder**: The BOSH System Metrics Forwarder is located on the Loggregator Traffic Controller. It forwards heartbeat events from the BOSH System Metrics Server as envelopes to Loggregator through a Loggregator Agent.
